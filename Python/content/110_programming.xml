<section id="development">
== Programming in Python
	<section id="development_comments">
=== Comments
		The following create a single line comment.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/comments/comments.txt[]
----
		

	<section id="development_variables">
=== Variables
		Python provides dynamic typing of its variables, e.g. you do not
			have to define a type of the variable Python will take care of this
			for you.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/variables/variables.txt[]
----
		

	<section id="development_assertions">
=== Assertions
		Python provides assertions. These assertions are always
			called.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/assertions/assertions.txt[]
----
		

	<section id="development_methods">
=== Methods / Functions in Python
		 Python allows to define methods via the keyword def. As the
			language is interpreted the methods need to be defined before using
			it.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/methods/methodtester.py[]
----
		

	<section id="development_conditionals">
=== Loops and if clauses
		 The following demonstrates a loop the usage of an if-clause.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/conditional/IfTest.py[]
----
		


	<section id="development_strings">
=== String manipulation
		 Python allows the following String operations.

.Table Title
|===

				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					
						
|Operations
|Description
						
					
					
						
|len(s)
|Returns the length of string s
						
						
|s[i]
|Gets the element on position i in String s, position
								start
								with zero
						
						
|s[-i]
|Get the i-tes Sign of the string from behind the
								string,
								e.g. -1 returns the last element in the string
						
						
|"abcdefg"[0:4]
|Gets the first 4 elements (abcd)
						
						
|"abcdefg"[4:]
|Gets the elements after the first 4 elements (abcd)
							
						
						
|`a`+`b` + `c`
|Concatenates the int varibles a, b,c, e.g. if
								a=1, b=2,
								c=3
								then the result is 123.
						
						
|s.lower()
|Result will be s in lower cases
						
						
|s.upper()
|Result will be s in upper cases
						
						
|s.startswith(t)
|True, if s startsWith t
						
						
|s.rstrip()
|Removes the end of line sign from the string
						
					
				
			|===
		
		For example:
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/string/stringTester.py[]
----
		

	<section id="development_concatenate">
=== Concatenate strings and numbers
		 Python does not allow to concatenate a string directly with a
			number. It requires you to turn the number first into a string with
			the str() function. 
		
		 If you do not use str() you will get "TypeError: cannot
			concatenate 'str' and 'int' objects".

		For example:
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/string/stringNumberConcatenate.py[]
----
		

	<section id="development_lists">
=== Lists
		 Python has good support for lists. See the following example
			how to create a list, how to access individual elements or
			sublists
			and how to add elements to a list.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/list/List.py[]
----
		
		 If you want to remove the duplicates from a list you can use:
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/list/ListDuplicates.py[]
----
		



	<section id="textfiles">
=== Processing files in Python
		 The following example is contained in the project
			"de.vogella.python.files".
		 The following reads a file, strips out the end of line sign and
			prints
			each line to the console.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/file/Readfile.py[]
----
		

		 The following reads the same file but write the output to
			another file.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/file/ReadWriteFile.py[]
----
		


	<section id="splitstring">
=== Splitting strings and comparing lists.
		 The following example is contained in the project
			"de.vogella.python.files". It reads to files which contain one long
			comma separated string. This string is splitted into lists and the
			lists are compared. 
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/split/CompareFiles.py[]
----
		


	<section id="unicode">
=== Writing Python Scripts in Unicode
		 If you read special non ASCII sign, e.g. ö, ä. ü or ß, you have
			to tell Python which character set to use. Include the following in
			the first or second line of your script.  
			
			
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/utf/example.txt[]
----
		
			

	<section id="classes">
=== Classes in Python
		 The following is a defined class in Python. Python uses the
			naming convension __name__ for internal functions.
		 Python allows operator overloading, e.g. you can define what
			the
			operator + will to for a specific class.

.Table Title
|===

				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					
						
|__init__
|Constructor of the class
						
					
					
						
|__str__
|The method which is called if print is applied to this
								object
						
						
|__add__
|+ Operator
						
						
|__mul__
|* Operator
						
					
				
			|===
		
		The empty object (null) is called <wordasword>None</wordasword> in Python.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/classes/Point.py[]
----
		

