<section id="tags" role="wrapper">
	<title>Tags in Git</title>
	<section id="tagging">
		<title>What are tags?</title>
		<indexterm>
			<primary>Tags/Tagging</primary>
		</indexterm>
		<para>
			Git has the option to
			<wordasword>tag</wordasword>
			a commit in the repository history so
			that
			you find it easier at
			a later
			point in time. Most
			commonly,
			this is used to tag a
			certain
			version which
			has been
			released.
		</para>
		<para>If you tag a commit, you create an annotated or lightweight tag.
		</para>
	</section>
	<section id="tagging_lightweight_annotated">
		<title>Lightweight and annotated tags</title>
		<para>
			Git supports two different types of tags, lightweight
			and
			annotated
			tags.
		</para>

		<para>
			A
			<wordasword>lightweight tag</wordasword>
			<indexterm>
				<primary>Tags/Tagging</primary>
				<secondary>lightweight tag</secondary>
			</indexterm>
			is a pointer to a commit, without any
			additional information about the
			tag. An
			<wordasword>annotated tag</wordasword>
			<indexterm>
				<primary>Tags/Tagging</primary>
				<secondary>annotated tag</secondary>
			</indexterm>
			contains additional information about the tag, e.g., the name and email
			of the person who
			created the tag, a tagging message and the date of
			the tagging.
			<wordasword>Annotated tags</wordasword>
			can also be signed and verified with
			<wordasword>GNU Privacy Guard (GPG)</wordasword>
			.
		</para>

	</section>
	<section id="tagging_namingconventions">
		<title>Naming conventions for tags</title>
		<indexterm>
			<primary>Tags/Tagging</primary>
			<secondary>naming conventions</secondary>
		</indexterm>
		<para>
			Tags are frequently used to tag the state of a release of the Git
			repository. In
			this case they are typically called
			<wordasword>release tags</wordasword>
			.
		</para>
		<para>Convention is that release tags are labeled based on the
			[major].[minor].[patch] naming scheme, for example "1.0.0". Several
			projects also use the "v" prefix.
		</para>
		<para>
			The idea is that the
			<wordasword>patch</wordasword>
			version is incremented if (only) backwards
			compatible bug
			fixes
			are
			introduced, the
			<wordasword>minor</wordasword>
			version is incremented if new,
			backwards
			compatible functionality is
			introduced to the public API and
			the
			<wordasword>major</wordasword>
			version is incremented if any backwards
			incompatible changes
			are
			introduced to the public API.
		</para>
		<para>
			For the detailed discussion on naming conventions please see the
			following URL:
			<ulink url="http://semver.org/">Semantic versioning</ulink>
			.
		</para>
	</section>
</section>