<section role="wrapper">
	<title>Configure files and directories to ignore</title>
	<section>
		<title>Ignoring files and directories with a .gitignore file</title>
		<indexterm>
			<primary>Ignore files</primary>
		</indexterm>
		<indexterm>
			<primary>.gitignore</primary>
		</indexterm>
		<para>
			Git can be configured to ignore certain files and directories for
			repository operations. This
			is
			configured via one or several
			<filename>.gitignore</filename>
			files. Typically, this file is located at the root of your Git
			repository but it can also be located in sub-directories. In the
			second case the defined rules are only valid for the sub-directory
			and
			below.
		</para>
		<para>
			You can use certain wildcards in this file.
			<parameter>*</parameter>
			matches several characters.
			More patterns are possible and
			described
			under the following URL:
			<ulink
				url="https://www.kernel.org/pub/software/scm/git/docs/gitignore.html">gitignore manpage</ulink>
		</para>
		<para>
			For example, the following
			<filename>.gitignore</filename>
			file tells Git to ignore the
			<filename>bin</filename>
			and
			<filename>target</filename>
			directories and all files ending with a ~.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/ignore/gitignore" />
			</programlisting>
		</para>
		<para>
			You can create the
			<filename>.gitignore</filename>
			file
			in the root directory of the working tree to make it specific for
			the Git repository.
		</para>

		<tip>
			<para>
				The
				<filename>.gitignore</filename>
				file tells Git to ignore the specified files in Git
				commands.
				You can
				still add ignored files to the
				<wordasword>staging area</wordasword>
				of the Git repository
				by using the
				<code>--force</code>
				parameter, i.e. with the
				<code>git add --force [paths]</code>
				command.
			</para>
			<para>This is useful if you want to add, for example, auto-generated
				binaries, but you need to have a fine control about the version
				which
				is added and want to exclude them from the normal workflow.
			</para>
		</tip>

		<para>
			It is good practice to commit the local
			<filename>.gitignore</filename>
			file into the Git repository so that everyone who clones this
			repository have it.
		</para>


	</section>
	<section>
		<title>Global (cross-repository) .gitignore settings</title>
		<para>
			You can also setup a global
			<filename>.gitignore</filename>
			file valid for all Git repositories via the
			<code>core.excludesfile</code>
			setting. The setup of this setting is demonstrated in the following
			code snippet.
		</para>

		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/gitignore/global.txt" />
			</programlisting>
		</para>
		<para>
			The
			global
			<filename>.gitignore</filename>
			file is only
			locally available.
		</para>


	</section>
	<section>
		<title>Local per-repository ignore rules</title>
		<para>
			You can also create local per-repository rules by editing the
			<filename>.git/info/exclude</filename>
			file in your repository. These rules are not committed with the
			repository so they are not shared with others.
		</para>
		<para>This allows you to exclude, for example, locally generated
			files.
		</para>
	</section>

</section>
	