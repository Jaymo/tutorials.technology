<section id="submodules" role="wrapper">
	<title>Working with submodules</title>
	<section id="submodules_cloning">
		<title>Updating submodules</title>
		<para>
			To pull in changes into a Git repository including the changes in
			submodules, you
			can use the
			<parameter>--recurse-submodules</parameter>
			parameter in the
			<code>git pull command</code>
			.
		</para>

		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/submodules/pull.txt" />
			</programlisting>
		</para>
		<para>
			Use the
			<code>git submodule update
			</code>
			command to set
			the submodules to the commit specified
			by the main
			repository.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/submodules/update1.txt" />
			</programlisting>
		</para>
		<warning>
			<para>The fact that submodules track commits and not branches
				frequently leads to
				confusion. That is why Git 1.8.2 added the option
				to also
				track branches. Read the following sections to learn more
				about
				this.
			</para>
		</warning>
	</section>

	<section id="submodules_trackbranch">
		<title>Tracking branches with submodules</title>
		<para>
			Since its 1.8.2 release the Git system allows tracking a
			branch in a
			submodule.
			To track
			branches you specify the branch with
			the
			<parameter>-b</parameter>
			parameter during the
			<code>submodule add</code>
			command.
		</para>
		<para>
			This allows you use to use
			<parameter>--remote</parameter>
			parameter in the
			<code>git submodule update</code>
			command.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/submodules/branch.txt" />
			</programlisting>
		</para>

	</section>

	<section id="submodules_track">
		<title>Tracking commits</title>
		<para>
			Without any additional parameter, submodules are tracked by
			commit,
			i.e., the main Git
			repository remembers a certain commit of the
			submodule.
		</para>
		<para>
			The
			<code>git submodule update</code>
			command sets the Git repository of the submodule to that
			particular
			commit. The submodule repository tracks its own content which is
			nested into the main repository. This main repository refers to a
			commit of the
			nested submodule repository.
		</para>

		<warning>
			<para>
				This means that if you
				pull in new changes into the submodules,
				you need to create a new commit in your main repository in order to
				track the updates of the nested submodules.
			</para>
		</warning>

		<para>
			If you update your submodule and want to use this update in your main
			repository, you need to commit this change in your main repository.
			The
			<code>git submodule update</code>
			command
			sets the submodule to the commit referred to in the main
			repository.
		</para>

		<para>
			The following example shows how to update a submodule to its
			latest commit in its master branch.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/submodules/update.txt" />
			</programlisting>
		</para>
		<para>Another developer can get the update by pulling in the changes
			and running the submodules update command.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/submodules/getupdate.txt" />
			</programlisting>
		</para>
		<warning>
			<para>
				With this setup you are tracking commits, so if the master
				branch in
				the submodule moves on, you are still pointing to the
				existing
				commit. You need to repeat this procedure every time you
				want to use
				new changes of the submodules. See
				<xref linkend="submodules_trackbranch" />
				for tracking branches.
			</para>
		</warning>
	</section>

</section>
