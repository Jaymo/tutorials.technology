<section id="gitreflog" role="wrapper">
== Recovering lost commits
	<section id="detachedheadmode">
=== Detached HEAD
		
			LARSPRIMARYINDEX"Detached HEAD"LARSPRIMARYINDEX
		
		
			If you checkout a commit or a tag, you are in the so-called
			_detached HEAD mode_
			. If you commit changes in this mode, you have no
			branch
			which
			points to
			this commit. After you checkout a branch you
			cannot see
			the commit you
			did in detached head mode in the
			`git log`
			command.
		
		
			To find such commits you can use the
			`git reflog`
			command.
		
	
	<section id="gitreflog_definition">
=== git reflog
		
			LARSPRIMARYINDEX"git reflog"LARSPRIMARYINDEX
		
		
			Reflog is a mechanism to record the movements of the
			_HEAD_
			and the branches references.
		

		
			The Git reflog command gives a history of the complete
			changes of the
			_HEAD_
			reference.
		
		[source,console]
----
include::./res/reflog/see.txt[]
----
		
			The
			`git reflog`
			command also list commits which you have removed.
		
		<tip>
			
				There are multiple reflogs: one per branch and one for HEAD.
				For
				branches use the
				`git reflog [branch]`
				command and for
				HEAD use the
				`git reflog`
				or the
				`git reflog HEAD`
				command.
			
		
	
	<section id="gitreflog_example">
=== Example
		The following example shows how you can use git reflog to
			reset
			the current local branch to a commit which isn't reachable from
			the current branch anymore.
		
		[source,console]
----
include::./res/reflog/remove.txt[]
----
	


