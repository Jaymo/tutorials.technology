<section id="gitreflog" role="wrapper">
	<title>Recovering lost commits</title>
	<section id="detachedheadmode">
		<title>Detached HEAD</title>
		
			LARSPRIMARYINDEX"Detached HEAD"LARSPRIMARYINDEX
		
		<para>
			If you checkout a commit or a tag, you are in the so-called
			<wordasword>detached HEAD mode</wordasword>
			. If you commit changes in this mode, you have no
			branch
			which
			points to
			this commit. After you checkout a branch you
			cannot see
			the commit you
			did in detached head mode in the
			<code>git log</code>
			command.
		</para>
		<para>
			To find such commits you can use the
			<code>git reflog</code>
			command.
		</para>
	</section>
	<section id="gitreflog_definition">
		<title>git reflog</title>
		
			LARSPRIMARYINDEX"git reflog"LARSPRIMARYINDEX
		
		<para>
			Reflog is a mechanism to record the movements of the
			<wordasword>HEAD</wordasword>
			and the branches references.
		</para>

		<para>
			The Git reflog command gives a history of the complete
			changes of the
			<wordasword>HEAD</wordasword>
			reference.
		</para>
		[source,terminal]
----
include::./examples/reflog/see.txt[]
----
		<para>
			The
			<code>git reflog</code>
			command also list commits which you have removed.
		</para>
		<tip>
			<para>
				There are multiple reflogs: one per branch and one for HEAD.
				For
				branches use the
				<code>git reflog [branch]</code>
				command and for
				HEAD use the
				<code>git reflog</code>
				or the
				<code>git reflog HEAD</code>
				command.
			</para>
		</tip>
	</section>
	<section id="gitreflog_example">
		<title>Example</title>
		<para>The following example shows how you can use git reflog to
			reset
			the current local branch to a commit which isn't reachable from
			the current branch anymore.
		</para>
		[source,terminal]
----
include::./examples/reflog/remove.txt[]
----
	</section>

</section>
