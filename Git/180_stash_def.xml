<section id="stash_usage" role="wrapper">
	<title>Stashing changes in Git</title>
	<section id="stash_usage1">
		<title>The git stash command</title>
		
			LARSPRIMARYINDEX"stashing in Git"LARSPRIMARYINDEX
		
		
			LARSPRIMARYINDEX"git stash"LARSPRIMARYINDEX
		
		<para>
			Git provides the
			<code>git stash</code>
			command which allows you
			to record the current state of the working
			directory and the staging area and to revert
			to
			the last
			committed
			revision.
		</para>
		<para> This allows you to pull in the latest changes or to develop an
			urgent fix. Afterwards you can restore the stashed changes, which
			will
			reapply
			the changes to the current version of the source code.
		</para>
	</section>
	<section id="stash_usage2">
		<title>When to use git stash</title>
		<para>
			In general using the stash command should be the exception in
			using
			Git. Typically, you would create new branches for new features
			and
			switch between branches. You can also commit frequently in your
			local
			Git repository and use interactive rebase to combine these
			commits
			later before pushing them to another Git repository.
		</para>
		<para>
			Even if you prefer not to use branches, you can avoid using the
			<code>git stash</code>
			command. In this case
			you commit the changes you want to put aside
			and
			amend the commit with the next commit. If you use the approach of
			creating a commit, you typically put a marker
			in the
			commit
			message to
			mark it as a draft, e.g., "[DRAFT] implement
			feature
			x".
		</para>
	</section>
</section>