<section id="mergeconflict" role="wrapper">
	<title>Exercise: Solving a conflict during a merge operation</title>

	<section id="mergeconflict_examplecreate">
		<title>Create a conflict</title>

		<para>
			In the following example you
			create a conflict during a merge
			operation.
		</para>
		<para>
			The following steps
			create a
			merge conflict. It assumes that
			<wordasword>repo1</wordasword>
			and
			<wordasword>repo2</wordasword>
			have the same
			<wordasword>origin</wordasword>
			repository defined.
		</para>

		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/createconflict1.txt" />
			</programlisting>
		</para>

		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/createconflict2.txt" />
			</programlisting>
		</para>

		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/createconflict3.txt" />
			</programlisting>
		</para>

		<para>As this push would not result in a non-fast-format merge, you
			receive an error message similar to the following listing.
		</para>

		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/createconflict4.txt" />
			</programlisting>
		</para>

		<para>
			To solve this, you need to integrate the remote changes into your
			local repository. In the following listing the
			<code>git fetch</code>
			command gets the changes from the remote repository. The
			<code>git merge</code>
			command tries to integrate it into your local repository.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/createconflict5.txt" />
			</programlisting>
		</para>
		<para>
			This creates the conflict and a message similar to the
			following.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/createconflict7.txt" />
			</programlisting>
		</para>


		<para>
			The resulting conflict is displayed in
			<xref linkend="mergeconflict_examplesee" />
			and solved in
			<xref linkend="mergeconflict_examplesolve" />
		</para>
		<tip>
			<para>
				If you use the
				<code>git pull</code>
				command it performs the "fetch and merge" or the "fetch and rebase"
				command together in one step. Whether merge or rebase is used
				depends on
				your Git configuration for the branch. See
				<xref linkend="setup_rebase" />
				for the global configuration.
			</para>
		</tip>

	</section>
	<section id="mergeconflict_examplesee">
		<title>Review the conflict in the file</title>
		<para>
			Git marks
			the
			conflicts in the affected files. In the example from
			<xref linkend="mergeconflict_examplecreate" />
			one
			file has a conflict and the file looks
			like
			the following
			listing.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/mergeconflict.txt" />
			</programlisting>
		</para>

		<para>
			The text above the ======= signs is the conflicting change from
			your current branch and the text below is the conflicting change
			from
			the branch that you are merging in.
		</para>
	</section>
	<section id="mergeconflict_examplesolve">
		<title>Solve a conflict in a file</title>
		<para>
			In this example you
			resolve the conflict which was created in
			<xref linkend="mergeconflict_examplecreate" />
			and
			apply the change to
			the Git
			repository.
		</para>
		<para>To solve the merge conflict you edit
			the file manually. The
			following listing shows a possible result.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/mergeconflictsolved.txt" />
			</programlisting>
		</para>
		<para>
			Afterwards add the affected file to the staging area and
			commit
			the
			result. This creates the merge commit. You can also push the
			integrated changes now to the remote repository.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/merge/createconflict6.txt" />
			</programlisting>
		</para>

		<para>
			Instead of using the
			<parameter>-m</parameter>
			option in the above example you can also use the
			<code>git commit</code>
			command without this option. In this case the command opens your
			default
			editor with the default commit message about the merged
			conflicts. It is good practice to use this message.
		</para>

		<tip>
			<para>
				Alternatively, you could use the
				<code>git mergetool</code>
				command.
				<code>git mergetool</code>
				starts a
				configurable merge tool that displays the changes in a
				split
				screen. Some operating systems may come with a suitable merge tool
				already installed or configured for Git.
			</para>
		</tip>

	</section>

</section>