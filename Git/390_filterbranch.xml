<section id="filterbranch" role="wrapper">
	<title>Rewriting commit history with git filter-branch</title>
	<section id="filterbranch_definition">
		<title>Using git filter-branch</title>
		
			LARSPRIMARYINDEX"git filter-branch"LARSPRIMARYINDEX
		
		<para>
			The
			<code>git filter-branch</code>
			command allows you to rewrite the Git commit history for selected
			branches and to apply custom filters on each revision. This creates
			different hashes for all modified commits. This implies that you get
			new IDs for all commits based on any rewritten commit.
		</para>
		<para>
			The command allows you to filter for several values, e.g., the
			author, the message, etc. For details please see the following link:
		</para>
		<para>
			<ulink
				url="http://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html">
				git-filter-branch(1) Manual Page
			</ulink>
		</para>

		<warning>
			<para>
				Using the
				<code>filter-branch</code>
				command
				is dangerous as it changes the Git repository. It changes the
				commit
				IDs and reacting on such a change requires explicit action
				from the
				developer, e.g., trying to rebase the stale local branch
				onto the
				corresponding rewritten remote-tracking branch.
			</para>
		</warning>
		<para>
			A practical case for using
			<code>git filter-branch</code>
			is where you have added a
			file which contains a password or a huge
			binary file
			to the Git repository,
			and you want to remove this file
			from the history. To completely remove the file you need to run the
			<code>filter-branch</code>
			command on all branches.
		</para>
	</section>

	<section id="filterbranch_example">
		<title>filter-branch example</title>
		<para>
			The following listing shows an example on how to replace
			the email
			address from one author of all the commits via the
			<code>git filter-branch</code>
			command.
		</para>
		[source,terminal]
----
include::./examples/filterbranch/replace.txt[]
----
	</section>

</section>