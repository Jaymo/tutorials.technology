<section id="setup" role="wrapper">
	<title>Performing the Git configuration</title>
	<section id="setup_user">
		<title>User configuration</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"user and email"LARSSECONDARY
		
		<para> You have to configure at least your user and email address to
			be able to commit to a Git repository because this information is
			stored in each commit.
		</para>
	</section>

	<section id="setup_userexercise">
		<title>Exercise: User configuration</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"user and email"LARSSECONDARY
		
		<para> Configure your user and email for Git via the following
			command.
		</para>
		[source,terminal]
----
include::./examples/commandline/setup.commands[]
----

	</section>
	<section id="setup_pushconfiguration">
		<title>Push configuration</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"push configuration"LARSSECONDARY
		
		
			LARSPRIMARYINDEX"push.default is unset
			"LARSPRIMARYINDEX
		
		<para>
			If your are using Git in a version below 2.0 you should also
			execute the following command.
		</para>
		[source,terminal]
----
include::./examples/commandline/setup_pushmatching.txt[]
----
		<para>
			This configures Git so that the
			<code>git push</code>
			command pushes only the active branch (in case it is connected to a
			remote
			branch, i.e., configured as remote-tracking
			branches) to your
			Git
			remote
			repository.
			As of Git version 2.0 this is the default and
			therefore it is
			good practice to
			configure this behavior.
		</para>
		<para>
			You learn about the push command in
			<xref linkend="cloneremotes_push" />
			.
		</para>

	</section>
	<section id="setup_rebase">
		<title>Avoid merge commits for pulling</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"autosetuprebase"LARSSECONDARY
		
		<para>If you pull in changes from a remote repository, Git by default
			creates merge commits if you pull in divergent changes. This may not
			be desired and you can avoid
			this via the following setting.
		</para>
		[source,terminal]
----
include::./examples/commandline/setup_useful[]
----
		<note>
			<para>This setting depends on the individual workflow. Some teams
				prefer to create merge commits, but the author of this $book likes
				to avoid them.
			</para>
		</note>

	</section>



	<section id="setup_highlighting">
		<title>Color Highlighting</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"color highlighting"LARSSECONDARY
		
		<para> The following commands enables color highlighting for Git in
			the console.
		</para>
		[source,terminal]
----
include::./examples/highlight/color.txt[]
----
	</section>
	<section id="setup_editor">
		<title>Setting the default editor</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"default editor"LARSSECONDARY
		
		<para>
			By default Git uses the system default editor which is taken
			from the
			<wordasword>VISUAL</wordasword>
			or
			<wordasword>EDITOR</wordasword>
			environment variables if set. You can
			configure
			a different one via the
			following setting.
		</para>
		[source,terminal]
----
include::./examples/settings/editor.txt[]
----
	</section>
	<section id="setup_mergetool">
		<title>Setting the default merge tool</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"default merge tool"LARSSECONDARY
		
		<para>File conflicts might occur in Git during an operation which
			combines different versions of the same files. In this case the user
			can
			directly
			edit the file to resolve the conflict.
		</para>

		<para>Git allows also to configure a merge tool for solving these
			conflicts.
			You have to use third
			party visual merge tools like
			tortoisemerge,
			p4merge, kdiff3
			etc. A
			Google search for these tools help
			you to
			install them on your
			platform. Keep in mind that such tools are
			not required, you can always edit the files directly in a text
			editor.
		</para>
		<para>Once you have installed them you can set your selected tool as
			default merge
			tool with the following command.
		</para>
		[source,terminal]
----
include::./examples/settings/mergetool.txt[]
----
	</section>

	<section id="setup_allsetttings">
		<title>More settings</title>

		<para>
			All possible Git settings are described under the following link:
			<ulink
				url="https://www.kernel.org/pub/software/scm/git/docs/git-config.html">git-config manual page</ulink>
		</para>
	</section>
	<section id="setup_seesettings">
		<title>Query Git settings</title>
		
			LARSPRIMARYINDEX"Configuration"LARSPRIMARYINDEX
			LARSSECONDARY"query existing configuration"LARSSECONDARY
		
		<para>To query your Git settings, execute the
			following command:
		</para>
		[source,terminal]
----
include::./examples/settings/listsettings.txt[]
----

		<para>If you want to query the global settings you can use the
			following command.
		</para>
		[source,terminal]
----
include::./examples/settings/listsettingsglobal.txt[]
----

	</section>

</section>