<section id="rebaseconflict" role="wrapper">
	<title>Solving rebase conflicts</title>

	<section id="rebaseconflict_definition">
		<title>What is a conflict during a rebase operation?</title>
		<indexterm>
			<primary>Rebase conflict</primary>
		</indexterm>
		<para>During a rebase operaton, several commits are applied onto a
			certain commit. If you rebase a branch onto another branch, this
			commit is the last
			common ancestor of the two branches.
		</para>
		<para>
			For each commit which is applied it is possible that a conflict
			occurs.
		</para>
	</section>
	<section id="rebaseconflict_solving">
		<title>Handling a conflict during a rebase operation</title>
		<para>If a conflict occurs during a rebase operation, the
			rebase
			operation stops and the developer needs to resolve the
			conflict. After
			he has solved the conflicts, the developer instructs Git to continue
			with
			the rebase operation.
		</para>
		<para> A conflict during a rebase operation is solved similarly to the
			way a
			conflict during a merge operation
			is solved. The developer edits
			the conflicts
			and adds the files to
			the Git index.
			Afterwards he
			continues the rebase
			operation with the
			following
			command.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/rebase/rebasecontinue.txt" />
			</programlisting>
		</para>
		<para>To see the files which have a rebase conflict use the following
			command.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/rebase/conflictingfiles.txt" />
			</programlisting>
		</para>
		<para>
			You solve such a conflict similar to the description in
			<xref linkend="mergeconflict_examplesolve" />
			.
		</para>
		<para>You can also skip the commit which creates the conflict.</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/rebase/rebaseskip.txt" />
			</programlisting>
		</para>
	</section>

	<section id="rebaseconflict_abort">
		<title>Aborting a rebase operation</title>
		<para>You can also abort a rebase operation with the following
			command.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/rebase/rebaseabort.txt" />
			</programlisting>
		</para>
	</section>
	<section id="rebaseconflict_theirs">
		<title>Picking theirs or ours for conflicting file</title>
		<indexterm>
			<primary>Rebase conflict</primary>
			<secondary>theirs parameter</secondary>
		</indexterm>
		<indexterm>
			<primary>Rebase conflict</primary>
			<secondary>ours parameter</secondary>
		</indexterm>
		<para>
			If a file is in conflict you can instruct Git to take the
			version from
			the new commit of the version of commit onto which the
			new changes are
			applied. This is sometimes easier than to solve all
			conflicts
			manually. For this you can use the
			<code>git checkout</code>
			with the
			<parameter>--theirs</parameter>
			or
			<parameter>--ours</parameter>
			flag. During the conflict
			<parameter>--ours</parameter>
			points to the file in the commit onto which the new commit is placed,
			i.g., using this skips the new changes for this file.
		</para>
		<para>Therefore to ignore the changes in a commit for a file use the
			following command.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/rebase/ours.txt" />
			</programlisting>
		</para>
		<para>To take the version of the new commit use the following command.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/rebase/theirs.txt" />
			</programlisting>
		</para>


	</section>
</section>