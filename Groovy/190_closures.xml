[[groovyclosures" role="wrapper">
== Using lambdas and closures in Groovy
[[groovyclosures1">
=== Defining closures
		
			Closures are
			_code fragments_
			or
			_code blocks_
			which can be used without
			being a
			method or a class.
		
		
			A closure in Groovy is defined via the following construct:
			`{list of parameters-> closure body}`
			.
			The values before the
			`->`
			sign define the parameters of the closure.

		

		
			For the case that only one
			parameter is used you can use the implicit
			defined
			`it`
			variable. The last statement of a closure is implicitly used to define the return value, if no return statement is
			defined. The usage of
			`it`
			variable on the automatic return statement is demonstrates in the following example.
[source,java]
----
include::res/closures/Tiny.groovy[]
----
		



[[groovyclosures_defaultvalues">
=== Defining default values in a closure
		If you define a closure you can also define default values for
			its parameters.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/closures/ClosureDefaultValue.groovy[]
----
		




[[groovyclosures2">
=== Example: Using closures in the each method

		 The Groovy collections have several methods which accept a
			closure as parameter, for example the each method.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/closures/ClosureEachTest.groovy[]
----
		

[[groovyclosures_sortlist">
=== Example: Sort a list by lenght of the string

		 The Groovy collections have several methods which accept a
			closure as parameter, for example the each method.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/closures/ClosureTest.groovy[]
----
		


[[groovyclosures_with">
=== Using the with method
		
			Every Groovy object has a
			`with`
			method which allows to group method and property calls to an object.
			The
			`with`
			method gets a closure as parameter and every method call or property
			access in this closure is applied to the object.
[source,java]
----
include::res/closures/WithExample.groovy[]
----
		


