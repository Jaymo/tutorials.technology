<section id="mop">
== Meta Object Protocol
	<section id="mop_purpose">
=== What is the Meta Object Protocol_
		
			The
			_Meta-Object Protocol (MOP)_
			is the underlying layer in Groovy which allows you to add methods and properties to an object at runtime.
			Using MOP
			you can
			methods and properties at runtime to existing objects.
		


	<section id="mop_methodandpropertyacces">
=== Calling methods or accessing properties on a Groovy object
		
			If a method is called or a property is accessed in a class and this
			class does not define this method / property then
			pre-defined methods
			are called which can be used to handle this call.
			<itemizedlist>
				<listitem>
					def methodMissing (String name, args) - Called for missing
						method
					
				</listitem>
				<listitem>
					void setProperty (String property, Object o ) - called for
						non
						existing setter of a property
					
				</listitem>
				<listitem>
					Object getProperty (String property) - called for non
						existing
						getter of a property
					
				</listitem>
			</itemizedlist>
		
		Instances of Groovy object have default implementations of these
			methods, but an Groovy object can override these
			methods. The
			Groovy
			framework calls the methods at runtime if a method or property cannot
			be found. This approach is for
			example used by the Groovy builder
			pattern,
			it pretends to have certain method.
		


	<section id="mop_addingpropertiesandmethods">
=== Adding methods and properties
		
			Using the
			`.metaclass`
			access you can add properties and methods to an existing class.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/AddMethods.groovy[]
----
		


