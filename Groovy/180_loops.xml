<section id="groovyloops" role="wrapper">
== Loops
	<section id="groovyloops1">
=== For and while loops
		
			Groovy supports the standard Java
			`for`
			, the
			`for-each`
			and the
			`while`
			loop. Groovy does
			not support the
			`do while`
			loop.
		

	<section id="groovyloops?each">
=== Using the each method
		
			While for and while loops are supported the Groovy way of iterating
			throw a list is using the
			`each()`
			method. Groovy provides this method on several objects include lists,
			maps and ranges.
		

		
			This method takes as argument a closure, a block of code which
			can directly get
			executed. You
			can either directly define the name
			of
			the variable
			which
			the value of
			each iteration should get assigned to
			or
			using the
			implicit available
			variable "it".
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/loop/PrintLoop.groovy[]
----
		
		
			Groovy provides also the
			`eachWithIndex`
			method which provides two parameters, the first is the element and
			the second it the index.
		

	<section id="groovyloops_numbers">
=== Iterative with numbers 

		
			In additional
			your
			have the methods
			`upto()`
			,
			`downto()`
			,
			`times()`
			on
			number variables.
			Also
			you can use ranges (this is an additional
			datatype) to execute
			certain
			things from a number to another number.
			This is demonstrated by the
			following
			example.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/loop/LoopTest.groovy[]
----
		

