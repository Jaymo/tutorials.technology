[[mop_exercise">
== Exercise: Meta Object Protocol
	[[mop_exercise_target">
=== Target of this exercise
		
			In this exercise you learn how to extend a Groovy class using
			the Meta Object Protocol.
		

	[[mop_exercise_anycall">
=== Making a Groovy object responding to all methods and property
			calls
		
		
			Create the following Groovy class. This class returns a fixed
			value for every property asked and it fakes method
			calls.
		
		
[source,text]
----
include::res/mop/AnyMethodExecutor.groovy[]
----
		

		 Test this method via the following Groovy script.

		
[source,text]
----
include::res/mop/TestAnyMethodExecutor.groovy[]
----
		


	[[mop_exercise_json">
=== Exercise: Adding JSON output to Groovy class, the ugly and the smart way
		Create the following Groovy class. 

		
[source,text]
----
include::res/mop/Task.groovy[]
----
		
		
			Is uses the
			`methodMissing`
			to respond to a
			`toJson`
			method call. This implementation is a bit ugly as it "pollutes" our
			domain model with "framework" code.
		
		This script trigger the JSON generation.
		
[source,text]
----
include::res/mop/TestMop.groovy[]
----
		

		
			Groovy allows to created an instance of
			`MetaClass`
			and register it automatic for a certain class. This registration is
			based on a package naming conversion:
		
[source,text]
----
include::res/mop/Naming.txt[]
----
		
			Create the following class in the listed package to register it as
			`MetaClass`
			for your class.
		

[source,text]
----
include::res/mop/MyMetaClass.groovy[]
----
		This allows you to clean up your domain model. 

		
[source,text]
----
include::res/mop/Task2.groovy[]
----
		

		Run your small test script again and validate that the
			conversion to JSON still
			works.
		

		
[source,text]
----
include::res/mop/TestMop.groovy[]
----
		


	[[mop_exercise_addingmethodtostring">
=== Exercise: Adding a method to String
		The following example demonstrates how you can add a method to the String class using closures. 

		
[source,text]
----
include::res/mop/AdditionalMethodOnStringWithClosures.groovy[]
----
		

