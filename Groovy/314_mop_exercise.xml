<section id="mop_exercise">
	<title>Exercise: Meta Object Protocol</title>
	<section id="mop_exercise_target">
		<title>Target of this exercise</title>
		<para>
			In this exercise you learn how to extend a Groovy class using
			the Meta Object Protocol.
		</para>
	</section>
	<section id="mop_exercise_anycall">
		<title>Making a Groovy object responding to all methods and property
			calls
		</title>
		<para>
			Create the following Groovy class. This class returns a fixed
			value for every property asked and it fakes method
			calls.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/AnyMethodExecutor.groovy" />
			</programlisting>
		</para>

		<para> Test this method via the following Groovy script.</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/mop/TestAnyMethodExecutor.groovy" />
			</programlisting>
		</para>
	</section>

	<section id="mop_exercise_json">
		<title>Exercise: Adding JSON output to Groovy class, the ugly and the smart way</title>
		<para>Create the following Groovy class. </para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/Task.groovy" />
			</programlisting>
		</para>
		<para>
			Is uses the
			<code>methodMissing</code>
			to respond to a
			<code>toJson</code>
			method call. This implementation is a bit ugly as it "pollutes" our
			domain model with "framework" code.
		</para>
		<para>This script trigger the JSON generation.</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/TestMop.groovy" />
			</programlisting>
		</para>

		<para>
			Groovy allows to created an instance of
			<code>MetaClass</code>
			and register it automatic for a certain class. This registration is
			based on a package naming conversion:
		</para>
		<programlisting>
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/Naming.txt" />
		</programlisting>
		<para>
			Create the following class in the listed package to register it as
			<code>MetaClass</code>
			for your class.
		</para>

		<programlisting>
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/MyMetaClass.groovy" />
		</programlisting>
		<para>This allows you to clean up your domain model. </para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/Task2.groovy" />
			</programlisting>
		</para>

		<para>Run your small test script again and validate that the
			conversion to JSON still
			works.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/mop/TestMop.groovy" />
			</programlisting>
		</para>
	</section>

	<section id="mop_exercise_addingmethodtostring">
		<title>Exercise: Adding a method to String</title>
		<para>The following example demonstrates how you can add a method to the String class using closures. </para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/mop/AdditionalMethodOnStringWithClosures.groovy" />
			</programlisting>
		</para>
	</section>
</section>