<section id="controlstructures" role="wrapper">
== Control structures</title>

	<section id="datatypes_evaluation">
=== Groovy evaluation of conditions - The Groovy truth</title>
		<para>
			Groovy evaluates a condition defined in a control statement
			differently
			from Java. A boolean expression is evaluated
			the same as
			in Java, but
			empty collections or null evaluates to
			`false`
			. The number "0" evaluates to
			`true`
			, all other numbers evaluates to
			`true`
			.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/controlstructure/GroovyTruth.groovy" />
			</programlisting>
		</para>
		<note>
			This evaluation is commonly known in the Groovy worlds as
			<wordasword>the Groovy truth</wordasword>
			.
		

	</section>
	<section id="controlstructures_if">
=== if statements</title>
		<para>
			The
			`if`
			and
			`switch`
			are supported, the if statement supports the Groovy truth, e.g., you
			can use for example a list as parameter in
			`if`
			and Groovy will evaluate this Groovy truth value.
		</para>
	</section>
	<section id="controlstructures_switch">
=== switch statement and the isCase method</title>

		<para>
			The switch statement is very flexible, everything which implements
			the
			`isCase`
			method can be used as classifier.Groovy provides an
			implementation of
			the
			`isCase()`
			method to
			`Class`
			(using isInstance),
			`Object`
			(using
			(equals),
			`Collections`
			(using contains) and regular expressions (using
			matches). You can also
			specify a closure, which is evaluated to a
			boolean value.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/switch/SwitchTest.groovy" />
			</programlisting>
		</para>
		<para>
			If several conditions fit, the first
			`case`
			statement is selected.
		</para>
		<para>
			To use your custom class in a switch statement implement the
			`isCase`
			method.
		</para>


	</section>

	<section id="controlstructuress_safenull">
=== Safe navigation operator</title>
		<para>
			You can use safe navigation operator to check safety for null via the
			`?.`
			operator.
			This will avoid a
			`NullPointerException`
			if you access
			properties of an object
			which is null.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/safenull/safenull.txt" />
			</programlisting>
		</para>
	</section>
	<section id="controlstructures_elvis">
=== Elvis operator</title>
		<para>
			The
			`?:`
			(called the Elvis operator) is a short form for the Java ternary
			operator. You can use this to set a default if an
			expression resolves
			to false or null.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/elvis/elvis.txt" />
			</programlisting>
		</para>

	</section>

</section>