<section id="groovy_strings">
== Strings in Groovy
	<section id="groovy_strings1">
=== Strings and GStrings
		
			Groovy allows to use two different types of String, the
			`java.lang.String`
			and the
			`groovy.lang.GString`
			class. You can also define a single line or a multi-line string in
			Groovy.
		

		
			Strings which
			are quoted in by "" are of type
			`GString`
			(short for
			Groovy
			Strings). In GStrings you can
			directly use
			variables or
			call Groovy code. The Groovy runtime evaluates the variables and
			method calls. An instance of
			`GString`
			is automatically converted to a
			`java.lang.String`
			whenever needed.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/datatypes/StringTesting.groovy" />
			</programlisting>
		
		
			The definition of these different types of Strings is
			demonstrated in
			the following table.

.Table Title
|===

		=== Define Strings in Groovy
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*" />
					<colspec colname='c2' colwidth="2*" />
					
						
|String example
|Description
						
					
					
						
|'This is a String'
|Standard Java String
						
						
|"This is a GString"
|Groovy GString, allows variable substitution and method
								calls
							
						
						
|''' Multiline string (with line breaks)'''
|A multi line string
						
						
|""" Multiline string (with line breaks)"""
|A multi line GString
						
						
|/regularexpression/
|Forward Slash â€“ Escape backslashes ignored, makes Regular
								Expressions more readable
						
					
				
			|===
		

		
			The
			`tokenize()`
			method tokenize the String into a list of String with a whitespace as
			the delimiter.
		
		
			The Groovy JDK adds the
			`toURL()`
			method to String, which allows to convert a String to a URL.
		
		
			The
			`trim`
			method removes is applied to remove leading and trailing whitespace.
		
	</section>

	<section id="groovy_strings2">
=== Operator overloading in Strings
		
			String support operator overloading. You can use + to concatenate
			strings, - to substract strings and the
			<wordasword>left-shift operator</wordasword>
			to add to a String.
		
	</section>
</section>
