[[datatypes_maps">
== Maps in Groovy
[[datatypes_maps1">
=== Map declaration and access
		 Groovy treads maps as first class constructs in the
			language.
		
		
			The items of maps are keyâ€“value pairs
			that are delimited by
			colons. An
			empty map
			can be created via `[:]`. By default a map is of the
			`java.util.HashMap`
			type. If the keys are of type String, you can avoid
			the single or
			double quotes in the map declaration.
		
		
[source,java]
----
include::res/maps/MapTest.groovy[]
----
		
		
			The values of a mapped value can
			get
			accessed
			via map[key].
			Assignment
			can
			be done via map[key]=value. You can also call
			`get(key)`
			or
			`get(key,default)`
			. In the second case, if the key is not found and the default is
			returned, the
			(key,default) pair
			is added to the
			map.
		

		
[source,java]
----
include::res/maps/MapTest.groovy[]
----
		
		
			The
			`keySet()`
			method returns a set of
			keys, a collection without duplicate entries
			and no guaranteed ordering.
		

[[datatypes_maps2">
=== Each, any and the every method
		
			You can call closures on the elements, via the
			`each()`
			,
			`any()`
			and
			`every()`
			method. The
			`any()`
			and
			`every()`
			methods return a boolean depending whether any or every entry in the
			map satisfies a condition defined by a closure.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/maps/CallMethods.groovy[]
----
		
		As you can see in the above example you can iterate in different
			ways through a map. The parameter for each can by one parameter and
			than it is the map entry or two in which case it is the key, value
			combination.
		




[[datatypes_map_search">
=== Searching in a map
		
			You can also use the following methods:

			<itemizedlist>
				<listitem>
					findAll(closure) - Finds all entries satisfying the condition
						defined by the closure
					
				</listitem>
				<listitem>
					find(closure) - Find the first entry satisfying the condition
						defined by the closure
					
				</listitem>
				<listitem>
					collect(closure) - Returns a list based on the map with the
						values returned by the closure
					
				</listitem>
				<listitem>
					submap('key1', 'key2', ) - returns a map based on the entries
						of the listed
						keys
					
				</listitem>
			</itemizedlist>
		


[[datatypes_map_adding">
=== Getting and adding defaults values via the get method
		
			The
			`get(key, default_value)`
			allows to add the "default_value" to the map and return it to the
			caller, if the element identified by "key" is not found in the map.
			The
			`get(key)`
			method, does not add automatically to the map.
		


[[datatypes_map_namedparameters">
=== Named arguments for method invocation
		It is possible to use named arguments in method invocation.
		
		
[source,java]
----
include::res/namedarguments/TestNamedArgument.groovy[]
----
		

		
			All named arguments are used are converted by Groovy them a map
			and passed into
			the
			method as first parameter. All other parameters
			are
			passed in
			afterwards. The method can now extract the parameter
			from the
			map and
			perform its setup.
		
		
[source,java]
----
include::res/namedarguments/Person.groovy[]
----
		

[[datatypes_map_converttolist">
=== Convert a list to a map
		
			To convert a list to a map you can use the
			`collectEntries`
			method.
		
		
[source,java]
----
include::res/maps/ConvertListToMap.groovy[]
----
		






