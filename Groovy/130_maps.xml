<section id="datatypes_maps">
	<title>Maps in Groovy</title>
	<section id="datatypes_maps1">
		<title>Map declaration and access</title>
		<para> Groovy treads maps as first class constructs in the
			language.
		</para>
		<para>
			The items of maps are keyâ€“value pairs
			that are delimited by
			colons. An
			empty map
			can be created via <code>[:]</code>. By default a map is of the
			<code>java.util.HashMap</code>
			type. If the keys are of type String, you can avoid
			the single or
			double quotes in the map declaration.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/maps/MapTest.groovy" />
			</programlisting>
		</para>
		<para>
			The values of a mapped value can
			get
			accessed
			via map[key].
			Assignment
			can
			be done via map[key]=value. You can also call
			<code>get(key)</code>
			or
			<code>get(key,default)</code>
			. In the second case, if the key is not found and the default is
			returned, the
			(key,default) pair
			is added to the
			map.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/maps/MapTest.groovy" />
			</programlisting>
		</para>
		<para>
			The
			<code>keySet()</code>
			method returns a set of
			keys, a collection without duplicate entries
			and no guaranteed ordering.
		</para>
	</section>
	<section id="datatypes_maps2">
		<title>Each, any and the every method</title>
		<para>
			You can call closures on the elements, via the
			<code>each()</code>
			,
			<code>any()</code>
			and
			<code>every()</code>
			method. The
			<code>any()</code>
			and
			<code>every()</code>
			methods return a boolean depending whether any or every entry in the
			map satisfies a condition defined by a closure.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/maps/CallMethods.groovy" />
			</programlisting>
		</para>
		<para>As you can see in the above example you can iterate in different
			ways through a map. The parameter for each can by one parameter and
			than it is the map entry or two in which case it is the key, value
			combination.
		</para>


	</section>

	<section id="datatypes_map_search">
		<title>Searching in a map</title>
		<para>
			You can also use the following methods:

			<itemizedlist>
				<listitem>
					<para>findAll(closure) - Finds all entries satisfying the condition
						defined by the closure
					</para>
				</listitem>
				<listitem>
					<para>find(closure) - Find the first entry satisfying the condition
						defined by the closure
					</para>
				</listitem>
				<listitem>
					<para>collect(closure) - Returns a list based on the map with the
						values returned by the closure
					</para>
				</listitem>
				<listitem>
					<para>submap('key1', 'key2', ) - returns a map based on the entries
						of the listed
						keys
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>

	<section id="datatypes_map_adding">
		<title>Getting and adding defaults values via the get method</title>
		<para>
			The
			<code>get(key, default_value)</code>
			allows to add the "default_value" to the map and return it to the
			caller, if the element identified by "key" is not found in the map.
			The
			<code>get(key)</code>
			method, does not add automatically to the map.
		</para>
	</section>

	<section id="datatypes_map_namedparameters">
		<title>Named arguments for method invocation</title>
		<para>It is possible to use named arguments in method invocation.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/namedarguments/TestNamedArgument.groovy" />
			</programlisting>
		</para>

		<para>
			All named arguments are used are converted by Groovy them a map
			and passed into
			the
			method as first parameter. All other parameters
			are
			passed in
			afterwards. The method can now extract the parameter
			from the
			map and
			perform its setup.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/namedarguments/Person.groovy" />
			</programlisting>
		</para>
	</section>
	<section id="datatypes_map_converttolist">
		<title>Convert a list to a map</title>
		<para>
			To convert a list to a map you can use the
			<code>collectEntries</code>
			method.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/maps/ConvertListToMap.groovy" />
			</programlisting>
		</para>



	</section>


</section>