<section id="maven_configuration">
	<title>Configuration and coordinates of a Maven project</title>

	<section id="maven_configurationpom">
		<title>Project Object Model (POM) </title>
		<indexterm>
			<primary>Maven
			</primary>
			<secondary>GAV
			</secondary>
		</indexterm>
		<indexterm>
			<primary>Maven
			</primary>
			<secondary>POM
			</secondary>
		</indexterm>
		<indexterm>
			<primary>Maven
			</primary>
			<secondary>Project Object Model
			</secondary>
		</indexterm>
		
			The configuration of a Maven project is done via a
			<wordasword>Project Object Model</wordasword>
			(POM)
			, which is represented by a
			<filename>pom.xml</filename>
			file.
		
		This file describes the project, configures plugins, and
			declares
			dependencies. The POM names the project,
			provides a set of
			unique
			identifiers (called coordinates) for a
			project, and defines the
			relationships between this
			project and others through
			dependencies,
			parents, and
			prerequisites.
		
		
			A POM file can include a
			<wordasword>modules</wordasword>
			section, which tells Maven
			which
			directories have POM files which
			need
			to be built.
		
		
			In the
			<wordasword>build</wordasword>
			section you can define plugins for which you need
			to build
			the
			artifacts in your project.
		
	</section>
	<section id="maven_configuration_coordinates">
		<title>Project unique identifier - project coordinates</title>

		<indexterm>
			<primary>Maven
			</primary>
			<secondary>Coordinates
			</secondary>
		</indexterm>
		Maven coordinates define a set of identifiers which can be used
			to uniquely identify a component like a Java
			library.
			These are defined
			via
			the groupId, artifactId, version and
			packaging property.
		

		
			<table frame='all'>
				<title>Coordinate attributes</title>
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="2.0*" />
					<colspec colname='c2' colwidth="6.0*" />
					<thead>
						<row>
							<entry>Name</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>groupId</entry>
							<entry>
								Defines a unique base name of the organization or group
								that created the project. This is normally a
								reverse domain
								name.
								For the
								generation the groupId also defines the package of
								the
								main
								class.
							</entry>
						</row>

						<row>
							<entry>artifactId</entry>
							<entry>
								Defines the unique name of the project. If
								you generate a
								new project via Maven this is also used as root
								folder for the
								project.
							</entry>
						</row>

						<row>
							<entry>packaging</entry>
							<entry>
								
									Defines the packaging method. This could be e.g. jar, war
									or
									ear. This
									setting define the basic sets of
									plug-ins which are
									bound to life cycle
									phase. This is not part of the unique
									identifier of the project.
								
								If the packaging type is pom, Maven does not create
									anything for this project, it is just meta-data.
								
							</entry>
						</row>

						<row>
							<entry>version</entry>
							<entry>
								This defines the version of the project.
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		

		A project’s groupId:artifactId:version (also known as GAV) make
			that project
			unique.
		
		

			The full Maven coordinates are often written in the following
			format:
			groupId:artifactId:packaging:version.
		
		
			By default,
			this is the only configuration file required for
			the
			build
			process.
		
		
			Maven always executes against an
			<wordasword>effective POM</wordasword>
			, a combination of
			settings from this project’s pom.xml,
			all parent
			POMs, a super-POM defined within Maven, user-defined
			settings,
			and
			active profiles.
		
		

			The result of a build is called
			<wordasword>artifact</wordasword>
			.
			An artifact, for example,
			can be an executable or an archive of
			documents.
		


	</section>
</section>