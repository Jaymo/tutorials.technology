<section id="gradle_buildjava">
	<title>Building Java projects
	<section id="gradle_buildjava1">
		<title>The Java plug-in
		
			The Java plug-in provides tasks to compile Java source code, run
			unit
			tests, create Javadoc and create a JAR file.
		
	</section>
	<section id="gradle_buildjava_projectlayout">
		<title>Default project layout of Java projects
		
			This plug-ins assume
			a certain setup of your Java project (similar to
			Maven).
			<itemizedlist>
				<listitem>
					src/main/java contains the Java source code
				</listitem>
				<listitem>
					src/test/java contains the Java tests
				</listitem>
			</itemizedlist>

			If you
			follow this setup, the following build file is
			sufficient to
			compile,
			test and bundle a Java project.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/java/build.gradle" />
			</programlisting>
		
		
			To start the build, type
			<code>gradle build</code>
			on the command line.
		
		
			<parameter>SourceSets</parameter>
			can be used to specify a different project structure, e.g., the
			sources are stored in a
			<filename>src</filename>
			folder rather than in
			<filename>src/main/java</filename>
			.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/java/sourcesets.gradle" />
			</programlisting>
		
	</section>

	<section id="gradle_init_task">
		<title>Java project creation with the init task
		
			Gradle does not yet support multiple project templates (called archetypes) like Maven. But it offers
			an
			<parameter>init</parameter>
			task create the structure of a new Gradle project. Without additional parameters, this task
			creates a Gradle project,
			which contains the
			gradle wrapper files, a
			<filename>build.gradle</filename>
			and
			<filename>settings.gradle</filename>
			file.
		
		
			When adding the
			<parameter>--type</parameter>
			parameter with
			<parameter>'java-library'</parameter>
			as value, a java project structure is created and the
			<filename>build.gradle</filename>
			file contains a certain Java template with JUnit.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/gradle_init_java_library.png" />
				</imageobject>
			</mediaobject>
		
		
			The
			<filename>build.gradle</filename>
			file will look similar to this:
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/java/build_init_java.gradle" />
			</programlisting>
		
		
			A project hosted at Github
			<ulink href="https://github.com/townsfolk/gradle-templates">gradle-templates project</ulink>
			provides more templates beyond the init task. The
			Gradle team is also
			working on this
			archetype/template
			topic.
		
	</section>

	<section id="gradle_java_artifact_properties">
		<title>Specifying the Java version in your build file
		
			Usually a Java project has a version and a target JRE on which it is compiled.
			The
			<parameter>version</parameter>
			and
			<parameter>sourceCompatibility</parameter>
			property can be set in the
			<filename>build.gradle</filename>
			file.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/java/build_version_sourceComp.gradle" />
			</programlisting>
		
		
			When the
			<parameter>version</parameter>
			property is set, the name of the resulting artifact will be changed
			accordingly, e.g.,
			<filename>{my-lib-name}-0.1.0.jar</filename>
			.
		
		
			If the artifact is an executable java application the
			<filename>MANIFEST.MF</filename>
			file must be aware of the class with the main method.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/java/main_class.gradle" />
			</programlisting>
		
	</section>
</section>
