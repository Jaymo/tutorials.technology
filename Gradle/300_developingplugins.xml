<section id="gradle_developingplugins" role="wrapper">
== Developing custom Gradle plug-ins
	<section id="gradle_developingplugins_target">
=== Why creating Gradle plug-ins
		As a general rule, it is useful to have a build that is as much declarative as possible as this simplifies
			future maintenance. Therefore it is adviced to avoid complex code in your Gradle build file. If you need customer
			logic you should place it, into a custom Gradle plugin.
		
	

	<section id="gradle_developingplugins_example">
=== Example: creating a simple Gradle plugin
		
			To create a custom Gradle plug-in you have to create the following directories for your Gradle project. The java or
			groovy directory is only required if you want to use Java or Groovy for writing your plugin.
			<itemizedlist>
				*
					projectroot/plugin/src/main/java
				
				*
					projectroot/plugin/src/main/resources/META-INF/gradle-plugins
				
				*
					projectroot/plugin/src/main/groovy
				
			
		
		
			Change your main
			_build.gradle_
			build file to the following.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/mainbuild.gradle" />
			</programlisting>
		
		
			Create a file
			_vogella.properties_
		
		in the
		_META-INF/gradle-plugins_
		folder. The name of the properties file defines your plugin name and its content points to the class which implements
		the plugin.
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/vogella.properties" />
			</programlisting>
		

		
			In the
			_plugin/src/main/java_
			folder create the following two classes.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/MyPlugin.java" />
			</programlisting>
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/MyTask.java" />
			</programlisting>
		
		
			In your
			_plugin_
			folder, create the following build.gradle file.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/build.gradle" />
			</programlisting>
		
		
			In your
			_plugin_
			folder, create the following
			_settings.gradle_
			file.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/settings.gradle" />
			</programlisting>
		


	

	<section id="gradle_developingplugins_example_deploy">
=== Example: deploy your custom Gradle plug-in to your local Maven repository
		Publish your Gradle plug-in to the Maven repo defined in your plugin/build.gradle file via the following
			command.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/publish.gradle" />
			</programlisting>
		
	

	<section id="gradle_developingplugins_example_usage">
=== Example: Using your new plugin
		To use your new plug-in, define a dependency to it and a task extending the defined task.
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/plugin/consumer.gradle" />
			</programlisting>
		

	
	