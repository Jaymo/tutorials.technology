<section id="gradle_tasks">
	<title>Gradle Tasks
	<section id="gradle_default_tasks">
		<title>Default Gradle tasks
		
			Gradle also offers tasks for introspection of Gradle itself, so
			a Gradle project can be analyzed by using
			Gradle's default tasks.
		
		
			A good example is the
			`tasks`
			task, which shows the available tasks of a project.
			When typing
			`gradle -q tasks`
			, a list of tasks is shown. This command lists the base tasks even without an
			_build.gradle_
			file.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/gradle_tasks_task.png"/>
				</imageobject>
			</mediaobject>
		
		
			Gradle also tries to give some guidiance for the usage of
			invoked
			tasks, as shown in the bottom of the console output.
			The
			`gradle tasks --all`
			command
			would also list dependent tasks, which are invoked before the
			actual task.
		
		
			When running
			`gradle tasks --all`
			the output looks quite similar to the one before, except of the
			`init`
			task, which depends on the
			`wrapper`
			task.
		
	</section>

	<section id="creating_gradle_tasks">
		<title>Creating custom Gradle tasks
		
			In the
			<xref linkend="gradle_runbuild_buildfile" />
			section the first minimalist task
			in a
			_build.gradle_
			file
			has been created.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/starter/build_hello.gradle" />
			</programlisting>
		
		
			When running the
			`gradle -q tasks`
			task with this
			_build.gradle_
			file, the
			`hello`
			task will be listed under "Other tasks".
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/gradle_starter_hello_task_command_line.png"/>
				</imageobject>
			</mediaobject>
		
		
			Tasks without a group are considered as private tasks.
			For instance
			the
			<guilabel>Gradle Task View</guilabel>
			of the Eclipse Gradle Plug-in hides these private tasks by
			default,
			but they can be shown by activating the right
			entry
			in the
			view's
			menu.
		
		
			Groups can be applied with the
			`group`
			property and a description can
			be applied by using the
			`description`
			property. In case the group already exists the
			`hello`
			task is added to it. If the group does not exist, it
			is created.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/tasks/build_hello_described.gradle" />
			</programlisting>
		
	</section>

	<section id="gradle_task_structure">
		<title>Task structure
		
			Gradle has different phases, when working with tasks. First of
			all there is a configuration phase, where the
			code, which is
			specified
			directly in a task's closure, is executed. The configuration
			block is executed for every
			available
			task
			and not only for those tasks,
			which are later actually executed.
		
		
			After the configuration phase, the execution phase then runs the
			code inside the
			`doFirst`
			or
			`doLast`
			closures of those tasks,
			which are actually executed.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/tasks/configuration_phase_build.gradle" />
			</programlisting>
		
		
			When running
			`&gt; gradle -q anotherUnrelatedTask`
			<quote>I always get printed even though, I am not invoked</quote>
			and
			<quote>I am in the doLast execution phase</quote>
			are printed. The first statement comes from the configuration phase in which the task definition of the
			`onlySpecifiesCodeForConfigurationPhase`
			is evaluated.
		
	</section>

	<section id="gradle_task_dependencies">
		<title>Task dependencies
		Gradle allows the definition of default tasks in the build file. These are
			executed, if no other tasks are
			specified.
			Tasks can also
			define their dependencies. Both
			settings are
			demonstrated in the
			following build file.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/starter/build.gradle" />
			</programlisting>
		
		
			<note>
				&lt;&lt;
					is a just shortcut for the doLast action. So the
					`clean`
					task could also use &lt;&lt; instead of doLast.
				
			</note>
		
		
			Hooking into predefined task executions for default tasks or tasks
			from plug-ins can also be done by using the
			`dependsOn`
			method.
		
		For instance when certain things have to be done right after the
			compilation of java code:
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/tasks/compile_java_dep_build.gradle" />
			</programlisting>
		
		
			An alternative to creating a new task, which depends on the
			`'compileJava'`
			task
			, a new execution block can also be directly applied to an
			existing
			task, e.g., the
			`'compileJava'`
			task.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/tasks/add_action_to_existing_task_build.gradle" />
			</programlisting>
		
		When running the javaCompile task all actions, which have been
			applied to the javaCompile task, are run one by
			one according to the
			order they have been applied to the task.
		
	</section>

	<section id="skip_gradle_tasks">
		<title>Skipping Tasks
		
			Skipping tasks can be done by passing a predicate closure to the
			`onlyIf`
			method of a task or by throwing a
			`StopExecutionException`
			before the actual work of a task is executed.
		
		
			<programlisting language="gradle">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/tasks/skip_tasks_build.gradle" />
			</programlisting>
		
		
			<note>
				
					Tasks depending on the eclipse task will be run even, if a
					`StopExecutionException`
					is thrown.
				
			</note>
		
	</section>
</section>
