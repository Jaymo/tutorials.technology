<section id="gradle_runbuild">
	<title>Running a build
	<indexterm>
		<primary>Gradle</primary>
		<secondary>Running a build</secondary>
	</indexterm>
	
		When starting a Gradle build via the command line, the
		<code>gradle</code>
		command tool looks for a file called
		<filename>build.gradle</filename>
		in the current directory.
	
	
		Gradle also supports abbreviation of tasks, e.g,. to start the task
		<parameter>lars</parameter>
		using the
		<code>gradle l</code>
		command is sufficient. The abbreviation must uniquely identify a task,
		otherwise an error, which tell that the
		abbreviation is ambiguous,
		will raise.
		CamelCase can also be used for an abbreviation, e.g., the
		task
		<code>gradle vogellaCompany</code>
		can also be called like this:
		<code>gradle vC</code>
	
	
		A Gradle build can be triggered via the
		<code>gradle</code>
		or
		<code>gradle -q</code>
		command. The
		<parameter>-q</parameter>
		or
		<parameter>--quite</parameter>
		parameter
		makes the execution of Gradle less verbose. A specific task
		can be addressed like this:
		<code>gradle -q other</code>
		, which runs the "other" task. Alternatively to the
		<code>gradle</code>
		command the Gradle wrapper can be used.
	
	
		To define a different build file the
		<parameter>-b buildFileName</parameter>
		option can be used.
	

	
		In scenarios where no network connection is available the
		<parameter>--offline</parameter>
		parameter can be used. This lets Gradle run offline, which means that
		Gradle does not try to reach resources from the
		network during a
		build. (e.g., additional dependencies from an artifact repository like Maven Central or Bintray)
	
	
		To get a detailed output of what Gradle is doing you can specify the
		<parameter>--info</parameter>
	
	parameter.
</section>
