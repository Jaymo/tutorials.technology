<section id="classModel-Driven Architecture (MDA) development_diagrams">
== Appendix: Class diagrams
	<section id="class_diagramss1s2a">
=== Overview
		
			A class diagram captures the static relationships of your
			software.
		
	</section>

	<section id="class_diagramss1s2b">
=== Classes
		
			A class is represented by a rectangular box divided into
			compartments.
			A Compartment is an area in the box to write
			information. The first
			compartment holds the
			<emphasis>name</emphasis>
			, the second holds the
			<emphasis>attributes</emphasis>
			and the third is used for the
			<emphasis>operations</emphasis>
			.
		

		
image::UML10.gif" />
				</imageobject>
			</mediaobject>
		
		
			Any compartment can be hidden to improve readability of the
			diagram.
		
		
			UML suggests that a class name:

			<itemizedlist>
				<listitem>
					Starts with a capital letter
				</listitem>
				<listitem>
					is centered in the top compartment
				</listitem>
				<listitem>
					is written in a boldface font
				</listitem>
				<listitem>
					is written in italics if the class is abstract
					
				</listitem>
			</itemizedlist>
		
	</section>

	<section id="class_diagramss1s2c">
=== Attributes
		
			Attributes specifies details of a class and can be simple
			types
			or objects.
		
		
			Attributes can be defined inlined (as part second
			compartment of
			the diagram of the class) or as relationship.
		
		<section id="class_diagramss1s2bs3a">
	=== Inlined Attributes
			
				Inlined attributes are placed in the second compartment
				of the
				class. The notation for inline attribute is:
			
			
				<emphasis>
					visibility name: type {multiplicity} {=default}
				</emphasis>

.Table Title
|===

					<tgroup cols='3' align='left' colsep='1' rowsep='1'>
						<colspec colname='c1' />
						<colspec colname='c2' />
						<colspec colname='c3' />
						
							
|Element
|Values
|Description
							
						
						
							
|visibility
|
									+
									-
									#
									~
								
|
									public Attribute
									private Attribute
									protected Attribute
									package Attribute
								
							
							
|name
|myName
|
									Name of the attribute following the
									camelCase notation
								
							
							
|type and
                explains the
                usage of the Eclipse UML2 Tools for modelling UML 2 diagrams
|
|
									Class name, interface or primitive
									types, e.g. int
								
							

							
|multiplicity
|
|
									Optional, if not specified then it
									is assumed to be 1, *
									for any value,
									1,..,* for ranges.
								
							


							
|default
|
|
									Optional, default value of the
									attribute
								
							
						
					
				|===
			
			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/UML20.gif" />

					</imageobject>
				</mediaobject>
			

		</section>

		<section id="class_diagramss1s2bs3b">
	=== Attributes by Relationship
			
				To model attributes by relationship you use an
				association
				relationship between the class which
				represents the attribute and the
				class containing the
				attribute.
			
			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/UML30.gif" />

					</imageobject>
				</mediaobject>
			

		</section>

		<section id="class_diagramss1s2bs3c">
	=== Static Attributes
			
				Static attributes (attributes that are part of the class
				and not
				part of the instance of the class) are displayed
				via underlining the
				name of the relationship.
			
		</section>

	</section>

	<section id="class_diagramss1s2d">
=== Interfaces
		
			Interfaces are indicated via the stereotype
			<![CDATA[ <<interface>> ]]>.
		

		
image::UMLInterface20.gif" />

				</imageobject>
			</mediaobject>
		
		
			Relationships can be expressed via the ball-and-socket
			notation.
		
		
image::UMLInterface30.gif" />

				</imageobject>
			</mediaobject>
		


	</section>
	<section id="class_diagramss1s2e">
=== Relationships
		
			UML defines several ways of representing relationships
			between
			classes.
		


		<section id="class_diagramss1s2es3a">
	=== Association
			
				Read as "..has a.." association between classes. Drawn
				as a
				straight line between the two classes. Does not
				mean that the classes
				are owned by one, other classes
				may use the connected class too.
			
			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/UML30.gif" />

					</imageobject>
				</mediaobject>
			
		</section>

		<section id="class_diagramss1s2es3b">
	=== Aggregation
			
				Read as "..owns a ..". Not as strong as a composite.
			

			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/UML50.gif" />

					</imageobject>
				</mediaobject>
			
		</section>

		<section id="class_diagramss1s2es3c">
	=== Composition
			
				Strong relationship between classes to the point of
				containment. Read as "..is part of..". If the owning
				instance is
				destroyed then normally (not necessarily)
				the linked object is
				destroyed too.
			

			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/UML60.gif" />

					</imageobject>
				</mediaobject>
			
		</section>

		<section id="class_diagramss1s2es3d">
	=== Generalisation
			
				Read as ".. is a..". Use to express inheritance.
				Represented by
				a solid line and a hollow triangular
				arrow. For example the following
				code could be expressed
				with the following diagram.
			
			
				<programlisting>
					<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
						parse="text" href="./examples/Animal.java" />
				</programlisting>
			
			
				<programlisting>
					<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
						parse="text" href="./examples/Frog.java" />
				</programlisting>
			
			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/UML70.gif" />

					</imageobject>
				</mediaobject>
			
		</section>
	</section>
	<section id="class_export">
=== Export your class diagram as image
		 To export your diagram as image / graphic, right-click on your
			diagram and select File -> Save as Image File.
		

		
image::ExportImage10.gif" />

				</imageobject>
			</mediaobject>
		
	</section>
</section>
